name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [main]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/bf-backend
  VERSION: ${{ github.sha }}
  NAME: go_cicd

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
    needs: build # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [self-hosted, label-go] # AWS ./configure에서 사용할 label명
    steps:
      # 레포지토리 코드를 가져오기 위해 actions/checkout@v2 액션 사용
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 8000:8000 --name my_django_app my_django_app

        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

        # docker run -d -p 8000:3000 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
#       # 시크릿 값 로드
#       - name: Load secrets.json
#         run: |
#           echo "${{ secrets.SECRETS_JSON }}" > secrets.json

#       # 배포 단계에서 Django 프로젝트 실행
#       - name: Deploy Django project
#         run: |
#           # secrets.json 파일이 복사된 후에 파일 내용을 환경 변수로 설정
#           export $(jq -r 'to_entries[] | .key + "=" + .value' secrets.json)

#           # 필요한 Django 관련 명령어 실행
#           python manage.py migrate
#           python manage.py collectstatic --noinput
#           python manage.py runserver

#         env:
#           DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

#       # 배포 단계에서 secrets.json 파일 사용
#       # - name: Deploy Django project
#       #   run: |
#       #     python manage.py migrate
#       #     python manage.py collectstatic --noinput
#       #     python manage.py runserver
#       #   env:
#       #     DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

# name: Deploy Django Project

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build_and_push:
#     name: Build and Push Docker Image
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v2

#       # Secrets 파일 가져오기
#       - name: Load secrets.json
#         run: |
#           echo "${{ secrets.SECRETS_JSON }}" > secrets.json

#       # Docker 이미지 빌드 및 GHCR에 푸시
#       - name: Build and Push Docker Image to GHCR
#         run: |
#           # secrets.json 파일에서 ghcr_token 값을 가져옴
#           GHCR_TOKEN=$(cat secrets.json | jq -r '.GHCR_TOKEN')

#           # Docker 이미지 빌드
#           docker build -t ghcr.io/bykbyk0401/config:latest .

#           # Docker 이미지에 GHCR에 로그인하기 위해 ghcr_token 사용
#           echo $GHCR_TOKEN | docker login ghcr.io -u bykbyk0401 --password-stdin

#           # Docker 이미지를 GHCR에 푸시
#           docker push ghcr.io/bykbyk0401/config:latest

#   deploy_to_ec2:
#     name: Deploy to EC2
#     needs: build_and_push
#     runs-on: ubuntu-latest

#     steps:
#       # SSH를 통해 EC2 인스턴스에 접속하여 Docker 설치
#       - name: Install Docker on EC2 Instance
#         run: |
#           # EC2 인스턴스에 SSH로 접속하기 위해 SSH 키를 저장하고, 퍼미션을 변경
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
#           chmod 600 deploy_key

#           # 인스턴스 IP 주소 가져오기
#           INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

#           # Docker 설치
#           ssh -i deploy_key -o "StrictHostKeyChecking no" ubuntu@$INSTANCE_IP 'sudo apt-get update && sudo apt-get install -y docker.io && sudo usermod -aG docker ubuntu'

#       # SSH를 통해 EC2 인스턴스에 접속하여 Docker 컨테이너 실행
#       - name: Run Docker Container on EC2 Instance
#         run: |
#           # EC2 인스턴스에 SSH로 접속하기 위해 SSH 키를 저장하고, 퍼미션을 변경
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
#           chmod 600 deploy_key

#           # 인스턴스 IP 주소 가져오기
#           INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

#           # Docker 컨테이너 실행
#           ssh -i deploy_key -o "StrictHostKeyChecking no" ubuntu@$INSTANCE_IP 'docker stop config || true && docker rm config || true && docker pull ghcr.io/bykbyk0401/config:latest && docker run -d -p 80:8000 --name config --restart always ghcr.io/bykbyk0401/config:latest'

#   cleanup:
#     name: Cleanup
#     runs-on: ubuntu-latest
#     needs: [build_and_push, deploy_to_ec2]

#     steps:
#       # 필요한 경우 생성된 SSH 키 파일 제거
#       - name: Remove SSH Key
#         run: |
#           rm -f deploy_key

#       # 필요한 경우 secrets.json 파일 제거
#       - name: Remove secrets.json
#         run: |
#           rm -f secrets.json
